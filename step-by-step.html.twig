 {# 

unmapped=> cad qui n'est pas associe a  un fichier de notre entité
-progress bar
Mimetype  cest sur le builder dans les ->add

on va sur la base que ns avons déja installeé symfony 5,

NB : Au début tu presentes tous les frameworks,bibbliothèques utilisées
 - BOOTSWATCH.COM -> se st les themes Bootstrap prefrabriques

  1- on crée un nouveau projet symfony => "symfony new --webapp AssSthomasDiaspora"
  
  2- appercu de la BDD : reset password (), user, annonces, categories, 
 
  3- configurer l'envoi de mail et l'accès à la BDD => cela se fait dans le .env
    
  4- n va dans base.html.twig pour ajouter les liens Bootstrap,js, font-awesome,
  - ensuite on installe  Run `composer require symfony/webpack-encore-bundle` to start using Symfony UX 
 - on installe nos composer: npm install, npm run dev , ;;
  -je vais dans public (asset) je crée un dossier css (à l'interieur style.css )et js (à l'interieur scripts.js)
  - on met nos include :  _nav et _footer
  - je configure pour l'application du bootstrap : config->package->twig.yaml en bas de  default_path j'ajoute:
 form_themes: ['bootstrap_5_layout.html.twig'] 
 
  - puis services.yaml en bas de parameters: j'ajoute pour le dossier des uploads:
  uploads_dir: '%kernel.project_dir%/public/uploads' 
  
  - puis dans security.yaml: on décomente role :
  access_control:
         - { path: ^/admin, roles: ROLE_ADMIN }
         - { path: ^/profile, roles: ROLE_USER }


 5- on va créer un controller pour notre page d'acceuil : symfony console make:controller DefaultController -> dans default je cree un fichier : home.html.twig qui sera ma landing page (page d'acceuil)
 
  6- on va créer notre BDD: symfony console doctrine:database:create
  
 7- on va créer l'authetification utilisateur, n'oublie pas le verify (email) , donc on va creer l'entité qui contient ttes les methodes qui vt servir aux utilisateurs (table USER: id,email,role,password,is_verified)
 - on fera donc les lignes de cmd suivantes : - symfony console make:user le nom de l'entité
 -NB: hasher les mots de passe des utilisateurs est devenu une obligation aujourd'hui.
 NB: n'oublie pas de mettre à jour ta base de données après chaque création , modification d'une entité ... avec la LC  symfony console doctrine:schema:update --force (d:s:u --force/-f)
 - ensuite pour que les user puissent s'authefier on fera en lc : symfony console make:auth
 - ensuite pour inscrire les utilisateurs on fera la lc : make:registration-form (pour le formulaire d'inscription)
  
 puis on accepte de connecter les utilisateurs après l'enregistrement ( c une boonne pratique)
 ensuite -ensuite pour la validation de l'envoi de l'e-mail faire la commande :
 composer require symfonycasts/verify-email-bundle (après avoir valider l'envoi des emails).
 composer require symfony/mailer (envoi des mails)

 NB:  @deprecated since Symfony 5.3, use getUserIdentifier instead 
 NB: n'oublie pas de lire les message sur le commandeur srtt pour chnger les redirections.
  on verifie les messags add.Flash (on copie le modèle ds register.html.twig)
 
NB: -apres pour se connecter il faudfra un reset password en cas d'oublie du mot de passe
 to use the   make:reset-password command ,                                                                                                                                                              
 run:         composer require symfonycasts/reset-password-bundle 
 -> la route après reinitialisation sera :app_login

 NB: c est quoi le cache, gerez vs-meme les contraintes, n'oublie pas les relations (coherentes dans my phpMyAdmin)
 NB: les classes commencent par une majuscule.
 - cd:?  framework Axentix... 
 NB: recommandations mettre le CSS apres block stylesheet s'il doit s'appliquer attes les pages,
 et le asset permet facilement le chargeement au niveau des routes. Car asset se base tjrs sur  la racine du dossier public.

  {{ encore_entry_link_tags('app') }} generer les fichiers js qui st associés à app.
 NB: pour que seul les users connectés accedent au profil on décommente - { path: ^/profile, roles: ROLE_USER }
 dans security.yaml t on remplce profile par user, 

LAYOUT (disposition,gabarit): 
1)Un Template, connu également sous le terme de modèle, layout ou Gabarit en français, représente l'ensemble des éléments graphiques de l'agencement des colonnes, passant par le choix des couleurs jusqu'à l'établissement de la structure des différents éléments enveloppant un site Internet, abstraction faite de son .
 2) La mise en page, ou mise en pages, est l'opération de disposition graphique d'un contenu informationnel dans un espace donné. Elle succède au travail de collecte et de composition du contenu et précède souvent le travail d'impression. Elle peut le précéder dans la mesure où elle est prédéfinie.

 3)C'est quoi un layout en informatique ?
Modèle d'architecture générale comprenant la structure et le design d'une page web pré-formatée.

NB : Quit the server with CONTROL-C
   : symfony serve -d (pour ne pas bloquer le cmd).

   :  symfony console cache:clear : pour nettoyer le cache.
   
   8- creer une interface admin
   - on creer une listee de membre avec CRUD pour l'admin bien évidemment.
   NB: lors du CRUD pour voir les archives il y'aura une erreur ui dira : You need to pass a parameter to 'findByTrash'
  -> tu iras ds User Repository et parametrer -> public function findByExampleField($value) 
  en faisant ce qui est en dessous

    public function findByTrash(string $order = 'DESC')
    {
       return $this->createQueryBuilder('a')
          ->where('a.deletedAt IS NOT NULL')
          ->orderBy('a.createdAt', $order)
          ->getQuery()
          ->getResult()
       ;
    }
-NB: public function ( les uses , injections des dépendances)... docker, les onclick (modales)
- dans les twigs ( ds les templates)
- buttons swicthes, conditions ternaires exp: <input type="checkbox" {{ (annonce.active) ? 'checked' : ''}}
- on ira dans security.yaml décoommenter ROLE_ADMIN
- je veux acceder au repo pour selectionner les donnes ds ma table
-| raw : le contenu je veux que tu ns le donne tel quel (afficher
)
9- ajout d'images
-  n va creer une entité image, on va stocker le nom des images qui nous interesse, juste le nom du fichier on ne stcokera pas le chemin ça nous permet de faire en sorte d 'avoir un site qui peut etre modifié sans aller a modifier ts les chemin en BDD.

NB: le Controller a pour role de gerer les routes
   - le Repository : permet de gerer les requetes particulieres vers la BDD.
   - parametrage des if dans verify e-mail (registrationController)
  - CLI : command line interface : petit assistant qu'on peut appeler par des LC et qui va ns aider a gerer notre app symfony
-  composer require server --dev :librairie à installer qd on passe en prod

- les controllers -> pour gerer les traitements
- Doctrine -> pour gerer l'accès aux données 
- Twig pour gerer l'affichage le rendu 

-App web : est une app qui est capable de repondre a un navigateur lorsque celui-ci appelle une adresse; l'app doit comprendre qu'n la appele a cet endroit la et fabriquer une reponse qu'elle va pouvoir renvoyer au nav pour que celui-ci l'affiche.

-gitignore  /.vscode/*
-une adresse : c une route 
-interpollation -> afficher le contenu d'une variable
----------- sécurité ---------
 empecher que l'user qui est connecte se reconnecte (/login)
NB: ne pas oublier pour le logout.
 
-----------Notion de dépendance---------

 -qd une classe , une fction a besoin de qqchose: fct( besoin d'une instance de la classe  $repo qui s'appellera )

10) - composer require --dev orm-fixtures  (faux jeu de donnees pour avoir des donnees a manipuler)
-ensuite : symfony console make:fixtures
-symfony console doctrine:fixtures:load
- symfony console doctrine:fixtures: --append
-
 -  orphanRemoval : lrsqu un user a ete supprime
diff cookies et fichiers caches


---------------ENVOI DES MAILS--------------

on peut valider un form sans entité
-no validate pour annuler la validation auto fu form
NB/ il faut configurer un transporteur pour l'envoi des mailsn un serveur dce mail soit une adresse gmail, smtp etc...
-qd on envoie un mail on doit envoyer une version HTML et une version Text
sendmail et native vont utiliser l'hebergeur pour envoyer le mail.
NB: mais dans un serveur  VPS (serveur nu) l'email n'est pas forcement configuré la on va utiliser soit un smtp  qu on va installer nous-même soit un third party Transport coe Amazon SES, Gmail , ...

MAILER_DSN=null://null #  en décommentanr ça permet de desactiver l enbvoi des mails et les debuguer

-on va utiliser un outil pour la configuration c est MailDev ds la doc ils proposent de l'installer avec docker mais nous on le fera avec npm install ca ns evitera d'installer un truc supplementaire
ligne de commande : npm install -g maildev  (-g parce quon va l'installer pas seulement sur le projet mais dans notre machine, en gros comme si on installait une appli un exe sur notre machine)
NB: POUR UTILISER LA LIGNE DE COMMANDE EN ADMIN => on met SUDO devant (on commence par sudo)

 #  Symfony\Component\Mailer\Messenger\SendEmailMessage: async

-------------USER------------
securityyaml
 form_login:
               login_path: login

               check_path: login

NB: decoommente la premeiere ligen ds security contrller login pour bloquer la reconnexion étant deja connecté

default_locale: fr    translations yaml (TRADUCTION LOCALE)

----------WEBPACK ENCORE-----------------

     nb: webpack encore ça reste du JS qui etre utilisé partt
     -npm pour installer les dependances front (se retrouver avc un  dossier  NODE_MODULES -> qui ne sera pas present en prod car il sert juste a compiler les fichiers css et js) => qui lit le fichier packagejson et va installer tt ce qui est necessaire au bon fonctionnement de webpack

   SAAS (sass) ET SYMFONY ENCOREE
   NB: Bootstrap est fait en saas
   -on installe boootstrap :npm install bootstrap --save-dev







bundle=>paquet



"The form's view data is expected to be an instance of class Symfony\Component\HttpFoundation\File\File, but is a(n) string. You can avoid this error by setting the "data_class" option to null or by adding a view transformer that transforms a(n) string to an instance of Symfony\Component\HttpFoundation\File\File."



      $builder
          ->add('file', FileType::class, array('data_class' => null))
          ->add('coverFile', FileType::class, array('data_class' => null))
          ->add('coverFile', FileType::class, array('data_class' => null,'required' => false))
          ->add('songName', TextType::class)
          ->add('songAuthor', TextType::class);






           
 /**
     * @Route("/espace-admin/ajouter-photo-profil", name="add_photo", methods={"GET|POST"})
     */
   
   
    public function addPhoto(Request $request, EntityManagerInterface $entityManager, SluggerInterface $slugger)
    {
        $user = new User();
        $form = $this->createForm(ProfilPhotoFormType::class);
        $form->handleRequest($request);

        if ($form->isSubmitted() && $form->isValid()) {

            
            $photo = $form->get('photo')->getData();

            // this condition is needed because the 'brochure' field is not required
            // so the PDF file must be processed only when a file is uploaded
            if ($photo) {
                $originalFilename = pathinfo($photo->getClientOriginalName(), PATHINFO_FILENAME);
                // this is needed to safely include the file name as part of the URL
                $safeFilename = $slugger->slug($originalFilename);
                $newFilename = $safeFilename.'-'.uniqid().'.'.$photo->guessExtension();

                // Move the file to the directory where brochures are stored
                try {
                  $photo->move(
                        $this->getParameter('uploads_dir'),
                        $newFilename
                    );
                } catch (FileException $e) {
                    // ... handle exception if something happens during file upload
                }

                // updates the 'brochureFilename' property to store the PDF file name
                // instead of its contents
                $user->setPhoto($newFilename);
            }

            // ... persist the $product variable or any other work
            $entityManager->persist($photo);
            $entityManager->flush();

            return $this->redirectToRoute('app_profile');
        }

        return $this->render('user/profile.html.twig', [
            'form' => $form->createView()
        ]);
    }
  ---------------links favicon--------------------    
<link rel="apple-touch-icon" sizes="152x152" href="/apple-touch-icon.png">
<link rel="icon" type="image/png" sizes="32x32" href="/favicon-32x32.png">
<link rel="icon" type="image/png" sizes="16x16" href="/favicon-16x16.png">
<link rel="manifest" href="/site.webmanifest">
<link rel="mask-icon" href="/safari-pinned-tab.svg" color="#5bbad5">
<meta name="msapplication-TileColor" content="#da532c">
<meta name="theme-color" content="#ffffff">

--------mise en production ----------
-composer require symfony/apache-pack (pour avoir le .htaccess)
2 git ignire =>  /.vscode/*c
   

   -on enleve node_modules, git, vendor, git ignore , webpack.config.js



   class toogle invisible par defaut




   /* ->add('photo', FileType::class, [
                'label' => 'Ajouter une photo de profil',
                'attr' => [
                    'class' => 'd-block mx-auto col-6 my-3 btn btn-warning'
                 ],

                // unmapped means that this field is not associated to any entity property
                'mapped' => true,

                // make it optional so you don't have to re-upload the PDF file
                // every time you edit the Product details
                'required' => false,

                // unmapped fields can't define their validation using annotations
                // in the associated entity, so you can use the PHP constraint classes
                'constraints' => [
                    new File([
                        'maxSize' => '3024k',
                        'mimeTypes' => [
                            'image/gif',
                            'image/jpeg',
                            'image/jpg',
                        ],
                        'mimeTypesMessage' => 'Veuillez télécharger une image valide',
                    ])
                ],
               
            ])*/

  d-flex justify-content-sm-start justify-content-md-start justify-content-lg-end 


  PATHIONFO fct native ou méthode PHP qui nous peremet de récuper le nom du fichier avec l'extension avec le tag BASE_NAMEname pour recuperer l'extension
  #}
  
